litesdcard_core.v:2404: Event wait (@) statement.

litesdcard_core.v:2405: Nonblocking assignment.    # Everything above `case`
litesdcard_core.v:2406: Nonblocking assignment.
litesdcard_core.v:2407: Nonblocking assignment.
litesdcard_core.v:2408: Nonblocking assignment.
litesdcard_core.v:2409: Nonblocking assignment.
litesdcard_core.v:2410: Nonblocking assignment.
litesdcard_core.v:2411: Nonblocking assignment.
litesdcard_core.v:2412: Nonblocking assignment.
litesdcard_core.v:2413: Nonblocking assignment.
litesdcard_core.v:2414: Nonblocking assignment.

litesdcard_core.v:2415: Case statement.
litesdcard_core.v:2439: Nonblocking assignment.    # Default block
litesdcard_core.v:2440: Nonblocking assignment.
litesdcard_core.v:2441: Nonblocking assignment.
litesdcard_core.v:2442: Nonblocking assignment.

[... loops ...]

litesdcard_core.v:2404: Event wait (@) statement.
litesdcard_core.v:2405: Nonblocking assignment.
litesdcard_core.v:2406: Nonblocking assignment.
litesdcard_core.v:2407: Nonblocking assignment.

...

----

sdblock2memdma_state:
	1'd1 ("RUN"):
	2'd2 ("DONE"):
	1'd0 ("INIT"):

----

Issue disappears after
	- Removing `sdblock2mem_wishbonedmawriter_sink_ready` from the if-statement (line 2422)
	- Removing `sdblock2mem_wishbonedmawriter_sink_ready` from the assignemnt (line 2413)
	- Removing `sdblock2mem_wishbonedmawriter_sink_ready` from the assignemnt (line 2439)

Signal `sdblock2mem_wishbonedmawriter_sink_ready`...
	- is a register (line 684)
	- is assigned to `sdblock2mem_source_source_ready` (a wire) (line 2351)
	- participates a the state machine (line 2404)

Signal `sdblock2mem_source_source_ready`...
	- is a wire (line 674)
	- is assigned by `sdblock2mem_wishbonedmawriter_sink_ready` (line 2351)
	- is assigned to `sdblock2mem_converter_source_ready` (a wire) (line 2386)

----

This problem manifests when two things happen:
	- The `sdblock2mem_wishbonedmawriter_sink_ready` is assigned twice within the always @(*) block
	- Something inside the always @(*) depends on `sdblock2mem_wishbonedmawriter_sink_ready` (the if-statement)

Unsuccessfully attempted to reproduce with just this structure (using two new registers).

----

https://github.com/steveicarus/iverilog/issues/321

This is the closest I've come to seeing someone else hit this issue with Icarus Verilog.

----

Assigning to `sdblock2mem_wishbonedmawriter_sink_ready` exactly once in each path fixes the issue.

-----

- Investigating how these always @(*) combinatorial logic blocks are generated by litex/migen.
	- https://github.com/enjoy-digital/litex/blob/b020d4cf62f20bffa4ce3c262c9c9c85802abe68/litex/gen/fhdl/verilog.py#L600-L605

- Interesting to note that the Verilator generator sets `regular_comb` to False, resulting in "sim" style generation.
	- https://github.com/enjoy-digital/litex/blob/03a5f16d70e01b0f67a32ef4f4ec8e530799c8b6/litex/build/sim/verilator.py#L203

----

https://twitter.com/yannsionneau/status/1462409247807967234

This is discussion of the EXACT problem!

Yup, set `regular_comb` to False. But why does this work?
